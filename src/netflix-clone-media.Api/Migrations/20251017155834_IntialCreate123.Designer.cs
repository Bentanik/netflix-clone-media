// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using netflix_clone_media.Api.Persistence;

#nullable disable

namespace netflix_clone_media.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251017155834_IntialCreate123")]
    partial class IntialCreate123
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MediaPartId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ThumbnailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("MediaPartId");

                    b.ToTable("Episode", (string)null);
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AgeRating")
                        .HasColumnType("integer");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("CoverThumnailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoverThumnailUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<TimeSpan>("TotalDuration")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("Media", (string)null);
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.MediaCast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<int>("RoleName")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("PersonId");

                    b.ToTable("MediaCasts");
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.MediaCountries", b =>
                {
                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MediaId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("MediaCountries", (string)null);
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.MediaDirector", b =>
                {
                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MediaId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("MediaDirector", (string)null);
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.MediaPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PartNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.ToTable("MediaPart", (string)null);
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.MediaType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MediaType", (string)null);
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.MediaTypeMapping", b =>
                {
                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MediaTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MediaId", "MediaTypeId");

                    b.HasIndex("MediaTypeId");

                    b.ToTable("MediaTypeMapping", (string)null);
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<string>("OtherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortBio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.Episode", b =>
                {
                    b.HasOne("netflix_clone_media.Api.Persistence.Entitiy.Media", "Media")
                        .WithMany("Episodes")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("netflix_clone_media.Api.Persistence.Entitiy.MediaPart", "MediaPart")
                        .WithMany("Episodes")
                        .HasForeignKey("MediaPartId");

                    b.Navigation("Media");

                    b.Navigation("MediaPart");
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.MediaCast", b =>
                {
                    b.HasOne("netflix_clone_media.Api.Persistence.Entitiy.Media", "Media")
                        .WithMany("Casts")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("netflix_clone_media.Api.Persistence.Entitiy.Person", "Person")
                        .WithMany("CastMedias")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.MediaCountries", b =>
                {
                    b.HasOne("netflix_clone_media.Api.Persistence.Entitiy.Country", "Country")
                        .WithMany("MediaCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("netflix_clone_media.Api.Persistence.Entitiy.Media", "Media")
                        .WithMany("MediaCountries")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.MediaDirector", b =>
                {
                    b.HasOne("netflix_clone_media.Api.Persistence.Entitiy.Media", "Media")
                        .WithMany("Directors")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("netflix_clone_media.Api.Persistence.Entitiy.Person", "Person")
                        .WithMany("DirectedMedias")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.MediaPart", b =>
                {
                    b.HasOne("netflix_clone_media.Api.Persistence.Entitiy.Media", "Media")
                        .WithMany("Parts")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.MediaTypeMapping", b =>
                {
                    b.HasOne("netflix_clone_media.Api.Persistence.Entitiy.Media", "Media")
                        .WithMany("MediaTypes")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("netflix_clone_media.Api.Persistence.Entitiy.MediaType", "MediaType")
                        .WithMany("MediaMappings")
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.Country", b =>
                {
                    b.Navigation("MediaCountries");
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.Media", b =>
                {
                    b.Navigation("Casts");

                    b.Navigation("Directors");

                    b.Navigation("Episodes");

                    b.Navigation("MediaCountries");

                    b.Navigation("MediaTypes");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.MediaPart", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.MediaType", b =>
                {
                    b.Navigation("MediaMappings");
                });

            modelBuilder.Entity("netflix_clone_media.Api.Persistence.Entitiy.Person", b =>
                {
                    b.Navigation("CastMedias");

                    b.Navigation("DirectedMedias");
                });
#pragma warning restore 612, 618
        }
    }
}
